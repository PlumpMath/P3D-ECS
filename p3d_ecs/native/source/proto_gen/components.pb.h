// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components.proto

#ifndef PROTOBUF_components_2eproto__INCLUDED
#define PROTOBUF_components_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "components_gen/transform_component_meta.pb.h"
#include "components_gen/physics_component_meta.pb.h"
// @@protoc_insertion_point(includes)

namespace p3d_ecs {
  namespace proto {

    // Internal implementation detail -- do not call these.
    void protobuf_AddDesc_components_2eproto();
    void protobuf_InitDefaults_components_2eproto();
    void protobuf_AssignDesc_components_2eproto();
    void protobuf_ShutdownFile_components_2eproto();

    class Components;

    // ===================================================================

    class Components
      : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:p3d_ecs.proto.Components) */ {
    public:
      Components();
      virtual ~Components();

      Components(const Components& from);

      inline Components& operator=(const Components& from) {
        CopyFrom(from);
        return *this;
      }

      static const ::google::protobuf::Descriptor* descriptor();
      static const Components& default_instance();

      static const Components* internal_default_instance();

      void Swap(Components* other);

      // implements Message ----------------------------------------------

      inline Components* New() const { return New(NULL); }

      Components* New(::google::protobuf::Arena* arena) const;
      void CopyFrom(const ::google::protobuf::Message& from);
      void MergeFrom(const ::google::protobuf::Message& from);
      void CopyFrom(const Components& from);
      void MergeFrom(const Components& from);
      void Clear();
      bool IsInitialized() const;

      size_t ByteSizeLong() const;
      bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input);
      void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const;
      ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* output) const;
      ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
        ::google::protobuf::uint8* output) const {
        return InternalSerializeWithCachedSizesToArray(false, output);
      }
      int GetCachedSize() const { return _cached_size_; }

    private:
      void SharedCtor();
      void SharedDtor();
      void SetCachedSize(int size) const;
      void InternalSwap(Components* other);
      void UnsafeMergeFrom(const Components& from);

    private:
      inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
        return _internal_metadata_.arena();
      }
      inline void* MaybeArenaPtr() const { return _internal_metadata_.raw_arena_ptr(); }

    public:
      ::google::protobuf::Metadata GetMetadata() const;

      // nested types ----------------------------------------------------

      // accessors -------------------------------------------------------

      // optional .p3d_ecs.proto.TransformComponent transform_component = 1;
      bool has_transform_component() const;
      void clear_transform_component();
      static const int kTransformComponentFieldNumber = 1;
      const ::p3d_ecs::proto::TransformComponent& transform_component() const;
      ::p3d_ecs::proto::TransformComponent* mutable_transform_component();
      ::p3d_ecs::proto::TransformComponent* release_transform_component();
      void set_allocated_transform_component(
        ::p3d_ecs::proto::TransformComponent* transform_component);

      // optional .p3d_ecs.proto.PhysicsComponent physics_component = 2;
      bool has_physics_component() const;
      void clear_physics_component();
      static const int kPhysicsComponentFieldNumber = 2;
      const ::p3d_ecs::proto::PhysicsComponent& physics_component() const;
      ::p3d_ecs::proto::PhysicsComponent* mutable_physics_component();
      ::p3d_ecs::proto::PhysicsComponent* release_physics_component();
      void set_allocated_physics_component(::p3d_ecs::proto::PhysicsComponent* physics_component);

      // @@protoc_insertion_point(class_scope:p3d_ecs.proto.Components)
    private:
      ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
      ::p3d_ecs::proto::TransformComponent* transform_component_;
      ::p3d_ecs::proto::PhysicsComponent* physics_component_;
      mutable int _cached_size_;
      friend void protobuf_InitDefaults_components_2eproto_impl();
      friend void protobuf_AddDesc_components_2eproto_impl();
      friend void protobuf_AssignDesc_components_2eproto();
      friend void protobuf_ShutdownFile_components_2eproto();

      void InitAsDefaultInstance();
    };
    extern ::google::protobuf::internal::ExplicitlyConstructed<Components>
      Components_default_instance_;

// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
    // Components

    // optional .p3d_ecs.proto.TransformComponent transform_component = 1;
    inline bool Components::has_transform_component() const {
      return this != internal_default_instance() && transform_component_ != NULL;
    }
    inline void Components::clear_transform_component() {
      if (GetArenaNoVirtual() == NULL && transform_component_ != NULL)
        delete transform_component_;
      transform_component_ = NULL;
    }
    inline const ::p3d_ecs::proto::TransformComponent& Components::transform_component() const {
      // @@protoc_insertion_point(field_get:p3d_ecs.proto.Components.transform_component)
      return transform_component_ != NULL
               ? *transform_component_
               : *::p3d_ecs::proto::TransformComponent::internal_default_instance();
    }
    inline ::p3d_ecs::proto::TransformComponent* Components::mutable_transform_component() {

      if (transform_component_ == NULL) {
        transform_component_ = new ::p3d_ecs::proto::TransformComponent;
      }
      // @@protoc_insertion_point(field_mutable:p3d_ecs.proto.Components.transform_component)
      return transform_component_;
    }
    inline ::p3d_ecs::proto::TransformComponent* Components::release_transform_component() {
      // @@protoc_insertion_point(field_release:p3d_ecs.proto.Components.transform_component)

      ::p3d_ecs::proto::TransformComponent* temp = transform_component_;
      transform_component_ = NULL;
      return temp;
    }
    inline void Components::set_allocated_transform_component(
      ::p3d_ecs::proto::TransformComponent* transform_component) {
      delete transform_component_;
      transform_component_ = transform_component;
      if (transform_component) {

      } else {
      }
      // @@protoc_insertion_point(field_set_allocated:p3d_ecs.proto.Components.transform_component)
    }

    // optional .p3d_ecs.proto.PhysicsComponent physics_component = 2;
    inline bool Components::has_physics_component() const {
      return this != internal_default_instance() && physics_component_ != NULL;
    }
    inline void Components::clear_physics_component() {
      if (GetArenaNoVirtual() == NULL && physics_component_ != NULL)
        delete physics_component_;
      physics_component_ = NULL;
    }
    inline const ::p3d_ecs::proto::PhysicsComponent& Components::physics_component() const {
      // @@protoc_insertion_point(field_get:p3d_ecs.proto.Components.physics_component)
      return physics_component_ != NULL
               ? *physics_component_
               : *::p3d_ecs::proto::PhysicsComponent::internal_default_instance();
    }
    inline ::p3d_ecs::proto::PhysicsComponent* Components::mutable_physics_component() {

      if (physics_component_ == NULL) {
        physics_component_ = new ::p3d_ecs::proto::PhysicsComponent;
      }
      // @@protoc_insertion_point(field_mutable:p3d_ecs.proto.Components.physics_component)
      return physics_component_;
    }
    inline ::p3d_ecs::proto::PhysicsComponent* Components::release_physics_component() {
      // @@protoc_insertion_point(field_release:p3d_ecs.proto.Components.physics_component)

      ::p3d_ecs::proto::PhysicsComponent* temp = physics_component_;
      physics_component_ = NULL;
      return temp;
    }
    inline void Components::set_allocated_physics_component(
      ::p3d_ecs::proto::PhysicsComponent* physics_component) {
      delete physics_component_;
      physics_component_ = physics_component;
      if (physics_component) {

      } else {
      }
      // @@protoc_insertion_point(field_set_allocated:p3d_ecs.proto.Components.physics_component)
    }

    inline const Components* Components::internal_default_instance() {
      return &Components_default_instance_.get();
    }
#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

  } // namespace proto
} // namespace p3d_ecs

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_components_2eproto__INCLUDED
