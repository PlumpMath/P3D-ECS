// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "components.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace p3d_ecs {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Components_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Components_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_components_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_components_2eproto() {
  protobuf_AddDesc_components_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "components.proto");
  GOOGLE_CHECK(file != NULL);
  Components_descriptor_ = file->message_type(0);
  static const int Components_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Components, transform_component_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Components, physics_component_),
  };
  Components_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Components_descriptor_,
      Components::internal_default_instance(),
      Components_offsets_,
      -1,
      -1,
      -1,
      sizeof(Components),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Components, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_components_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Components_descriptor_, Components::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_components_2eproto() {
  Components_default_instance_.Shutdown();
  delete Components_reflection_;
}

void protobuf_InitDefaults_components_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::p3d_ecs::proto::protobuf_InitDefaults_components_5fgen_2ftransform_5fcomponent_5fmeta_2eproto();
  ::p3d_ecs::proto::protobuf_InitDefaults_components_5fgen_2fphysics_5fcomponent_5fmeta_2eproto();
  Components_default_instance_.DefaultConstruct();
  Components_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_components_2eproto_once_);
void protobuf_InitDefaults_components_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_components_2eproto_once_,
                 &protobuf_InitDefaults_components_2eproto_impl);
}
void protobuf_AddDesc_components_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_components_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020components.proto\022\rp3d_ecs.proto\032-compo"
    "nents_gen/transform_component_meta.proto"
    "\032+components_gen/physics_component_meta."
    "proto\"\210\001\n\nComponents\022>\n\023transform_compon"
    "ent\030\001 \001(\0132!.p3d_ecs.proto.TransformCompo"
    "nent\022:\n\021physics_component\030\002 \001(\0132\037.p3d_ec"
    "s.proto.PhysicsComponentb\006proto3", 272);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "components.proto", &protobuf_RegisterTypes);
  ::p3d_ecs::proto::protobuf_AddDesc_components_5fgen_2ftransform_5fcomponent_5fmeta_2eproto();
  ::p3d_ecs::proto::protobuf_AddDesc_components_5fgen_2fphysics_5fcomponent_5fmeta_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_components_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_components_2eproto_once_);
void protobuf_AddDesc_components_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_components_2eproto_once_,
                 &protobuf_AddDesc_components_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_components_2eproto {
  StaticDescriptorInitializer_components_2eproto() {
    protobuf_AddDesc_components_2eproto();
  }
} static_descriptor_initializer_components_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Components::kTransformComponentFieldNumber;
const int Components::kPhysicsComponentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Components::Components()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_components_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:p3d_ecs.proto.Components)
}

void Components::InitAsDefaultInstance() {
  transform_component_ = const_cast< ::p3d_ecs::proto::TransformComponent*>(
      ::p3d_ecs::proto::TransformComponent::internal_default_instance());
  physics_component_ = const_cast< ::p3d_ecs::proto::PhysicsComponent*>(
      ::p3d_ecs::proto::PhysicsComponent::internal_default_instance());
}

Components::Components(const Components& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:p3d_ecs.proto.Components)
}

void Components::SharedCtor() {
  transform_component_ = NULL;
  physics_component_ = NULL;
  _cached_size_ = 0;
}

Components::~Components() {
  // @@protoc_insertion_point(destructor:p3d_ecs.proto.Components)
  SharedDtor();
}

void Components::SharedDtor() {
  if (this != &Components_default_instance_.get()) {
    delete transform_component_;
    delete physics_component_;
  }
}

void Components::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Components::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Components_descriptor_;
}

const Components& Components::default_instance() {
  protobuf_InitDefaults_components_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Components> Components_default_instance_;

Components* Components::New(::google::protobuf::Arena* arena) const {
  Components* n = new Components;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Components::Clear() {
// @@protoc_insertion_point(message_clear_start:p3d_ecs.proto.Components)
  if (GetArenaNoVirtual() == NULL && transform_component_ != NULL) delete transform_component_;
  transform_component_ = NULL;
  if (GetArenaNoVirtual() == NULL && physics_component_ != NULL) delete physics_component_;
  physics_component_ = NULL;
}

bool Components::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p3d_ecs.proto.Components)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .p3d_ecs.proto.TransformComponent transform_component = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_component()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_physics_component;
        break;
      }

      // optional .p3d_ecs.proto.PhysicsComponent physics_component = 2;
      case 2: {
        if (tag == 18) {
         parse_physics_component:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_physics_component()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p3d_ecs.proto.Components)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p3d_ecs.proto.Components)
  return false;
#undef DO_
}

void Components::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p3d_ecs.proto.Components)
  // optional .p3d_ecs.proto.TransformComponent transform_component = 1;
  if (this->has_transform_component()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transform_component_, output);
  }

  // optional .p3d_ecs.proto.PhysicsComponent physics_component = 2;
  if (this->has_physics_component()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->physics_component_, output);
  }

  // @@protoc_insertion_point(serialize_end:p3d_ecs.proto.Components)
}

::google::protobuf::uint8* Components::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p3d_ecs.proto.Components)
  // optional .p3d_ecs.proto.TransformComponent transform_component = 1;
  if (this->has_transform_component()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->transform_component_, false, target);
  }

  // optional .p3d_ecs.proto.PhysicsComponent physics_component = 2;
  if (this->has_physics_component()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->physics_component_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p3d_ecs.proto.Components)
  return target;
}

size_t Components::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p3d_ecs.proto.Components)
  size_t total_size = 0;

  // optional .p3d_ecs.proto.TransformComponent transform_component = 1;
  if (this->has_transform_component()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_component_);
  }

  // optional .p3d_ecs.proto.PhysicsComponent physics_component = 2;
  if (this->has_physics_component()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->physics_component_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Components::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p3d_ecs.proto.Components)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Components* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Components>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p3d_ecs.proto.Components)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p3d_ecs.proto.Components)
    UnsafeMergeFrom(*source);
  }
}

void Components::MergeFrom(const Components& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p3d_ecs.proto.Components)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Components::UnsafeMergeFrom(const Components& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_transform_component()) {
    mutable_transform_component()->::p3d_ecs::proto::TransformComponent::MergeFrom(from.transform_component());
  }
  if (from.has_physics_component()) {
    mutable_physics_component()->::p3d_ecs::proto::PhysicsComponent::MergeFrom(from.physics_component());
  }
}

void Components::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p3d_ecs.proto.Components)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Components::CopyFrom(const Components& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p3d_ecs.proto.Components)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Components::IsInitialized() const {

  return true;
}

void Components::Swap(Components* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Components::InternalSwap(Components* other) {
  std::swap(transform_component_, other->transform_component_);
  std::swap(physics_component_, other->physics_component_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Components::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Components_descriptor_;
  metadata.reflection = Components_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Components

// optional .p3d_ecs.proto.TransformComponent transform_component = 1;
bool Components::has_transform_component() const {
  return this != internal_default_instance() && transform_component_ != NULL;
}
void Components::clear_transform_component() {
  if (GetArenaNoVirtual() == NULL && transform_component_ != NULL) delete transform_component_;
  transform_component_ = NULL;
}
const ::p3d_ecs::proto::TransformComponent& Components::transform_component() const {
  // @@protoc_insertion_point(field_get:p3d_ecs.proto.Components.transform_component)
  return transform_component_ != NULL ? *transform_component_
                         : *::p3d_ecs::proto::TransformComponent::internal_default_instance();
}
::p3d_ecs::proto::TransformComponent* Components::mutable_transform_component() {
  
  if (transform_component_ == NULL) {
    transform_component_ = new ::p3d_ecs::proto::TransformComponent;
  }
  // @@protoc_insertion_point(field_mutable:p3d_ecs.proto.Components.transform_component)
  return transform_component_;
}
::p3d_ecs::proto::TransformComponent* Components::release_transform_component() {
  // @@protoc_insertion_point(field_release:p3d_ecs.proto.Components.transform_component)
  
  ::p3d_ecs::proto::TransformComponent* temp = transform_component_;
  transform_component_ = NULL;
  return temp;
}
void Components::set_allocated_transform_component(::p3d_ecs::proto::TransformComponent* transform_component) {
  delete transform_component_;
  transform_component_ = transform_component;
  if (transform_component) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p3d_ecs.proto.Components.transform_component)
}

// optional .p3d_ecs.proto.PhysicsComponent physics_component = 2;
bool Components::has_physics_component() const {
  return this != internal_default_instance() && physics_component_ != NULL;
}
void Components::clear_physics_component() {
  if (GetArenaNoVirtual() == NULL && physics_component_ != NULL) delete physics_component_;
  physics_component_ = NULL;
}
const ::p3d_ecs::proto::PhysicsComponent& Components::physics_component() const {
  // @@protoc_insertion_point(field_get:p3d_ecs.proto.Components.physics_component)
  return physics_component_ != NULL ? *physics_component_
                         : *::p3d_ecs::proto::PhysicsComponent::internal_default_instance();
}
::p3d_ecs::proto::PhysicsComponent* Components::mutable_physics_component() {
  
  if (physics_component_ == NULL) {
    physics_component_ = new ::p3d_ecs::proto::PhysicsComponent;
  }
  // @@protoc_insertion_point(field_mutable:p3d_ecs.proto.Components.physics_component)
  return physics_component_;
}
::p3d_ecs::proto::PhysicsComponent* Components::release_physics_component() {
  // @@protoc_insertion_point(field_release:p3d_ecs.proto.Components.physics_component)
  
  ::p3d_ecs::proto::PhysicsComponent* temp = physics_component_;
  physics_component_ = NULL;
  return temp;
}
void Components::set_allocated_physics_component(::p3d_ecs::proto::PhysicsComponent* physics_component) {
  delete physics_component_;
  physics_component_ = physics_component;
  if (physics_component) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p3d_ecs.proto.Components.physics_component)
}

inline const Components* Components::internal_default_instance() {
  return &Components_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace p3d_ecs

// @@protoc_insertion_point(global_scope)
